import sys
import os
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QTextEdit, QPushButton, QLabel,
    QFileDialog, QProgressBar, QMessageBox, QHBoxLayout
)
from PyQt5.QtCore import QThread, pyqtSignal
from yt_dlp import YoutubeDL


def pick_best_format(formats, max_height):
    # Filter for combined video+audio formats (no merging needed)
    combined_formats = [
        f for f in formats
        if f.get('vcodec') != 'none' and f.get('acodec') != 'none' and f.get('height') is not None and f['height'] <= max_height
    ]
    combined_formats.sort(key=lambda x: x['height'], reverse=True)

    if combined_formats:
        return combined_formats[0]['format_id']
    else:
        # fallback to best available format (may be audio only or video only)
        return 'best'


def get_best_format_for_url(url, max_height):
    ydl_opts = {'quiet': True, 'no_warnings': True}
    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        formats = info.get('formats', [])
        best_format = pick_best_format(formats, max_height)
        return best_format


class DownloadThread(QThread):
    progress_signal = pyqtSignal(str)
    finished_signal = pyqtSignal()

    def __init__(self, urls, output_path, max_height):
        super().__init__()
        self.urls = urls
        self.output_path = output_path
        self.max_height = max_height

    def run(self):
        os.makedirs(self.output_path, exist_ok=True)
        for url in self.urls:
            self.progress_signal.emit(f"Starting download: {url}")
            try:
                best_format = get_best_format_for_url(url, self.max_height)
                self.progress_signal.emit(f"Selected format: {best_format}")
                ydl_opts = {
                    'outtmpl': os.path.join(self.output_path, '%(title)s.%(ext)s'),
                    'format': best_format,
                    'progress_hooks': [self.hook],
                    'quiet': False,
                    'ignoreerrors': False,
                    # Removed merge_output_format to avoid ffmpeg dependency
                }
                with YoutubeDL(ydl_opts) as ydl_download:
                    ydl_download.download([url])
            except Exception as e:
                self.progress_signal.emit(f"Error downloading {url}: {str(e)}")
        self.finished_signal.emit()

    def hook(self, d):
        if d['status'] == 'downloading':
            percent = d.get('_percent_str', 'N/A').strip()
            speed = d.get('_speed_str', 'N/A').strip()
            eta = d.get('_eta_str', 'N/A').strip()
            self.progress_signal.emit(f"Downloading: {percent} at {speed}, ETA: {eta}")
        elif d['status'] == 'finished':
            self.progress_signal.emit("Download complete!")


class YouTubeDownloader(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Advanced YouTube Downloader")
        self.resize(600, 400)

        layout = QVBoxLayout()

        self.url_input = QTextEdit()
        self.url_input.setPlaceholderText("Paste YouTube URLs here, one per line...")
        layout.addWidget(self.url_input)

        path_layout = QHBoxLayout()
        self.path_label = QLabel("Select download folder:")
        path_layout.addWidget(self.path_label)

        self.select_path_btn = QPushButton("Browse")
        self.select_path_btn.clicked.connect(self.browse_folder)
        path_layout.addWidget(self.select_path_btn)

        layout.addLayout(path_layout)

        self.download_btn = QPushButton("Download")
        self.download_btn.clicked.connect(self.start_download)
        layout.addWidget(self.download_btn)

        self.status_label = QLabel("Status: Waiting for input")
        layout.addWidget(self.status_label)

        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        layout.addWidget(self.progress_bar)

        self.setLayout(layout)
        self.download_thread = None
        self.output_path = os.getcwd()

    def browse_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "Select Download Folder", self.output_path)
        if folder:
            self.output_path = folder
            self.path_label.setText(f"Download folder: {folder}")

    def get_max_screen_height(self):
        app = QApplication.instance()
        if not app:
            app = QApplication([])
        screen = app.primaryScreen()
        size = screen.size()
        return size.height()

    def start_download(self):
        urls_text = self.url_input.toPlainText().strip()
        if not urls_text:
            QMessageBox.warning(self, "No URLs", "Please enter at least one YouTube URL.")
            return
        urls = [line.strip() for line in urls_text.splitlines() if line.strip()]

        self.download_btn.setEnabled(False)
        self.status_label.setText("Status: Starting downloads...")
        self.progress_bar.setValue(0)

        max_height = self.get_max_screen_height()
        self.download_thread = DownloadThread(urls, self.output_path, max_height)
        self.download_thread.progress_signal.connect(self.update_status)
        self.download_thread.finished_signal.connect(self.download_finished)
        self.download_thread.start()

    def update_status(self, message):
        self.status_label.setText(message)
        import re
        match = re.search(r'(\d+(\.\d+)?)%', message)
        if match:
            val = float(match.group(1))
            self.progress_bar.setValue(int(val))

    def download_finished(self):
        self.status_label.setText("All downloads finished!")
        self.download_btn.setEnabled(True)
        self.progress_bar.setValue(100)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = YouTubeDownloader()
    window.show()
    sys.exit(app.exec_())
